from math import pow
import math
import sys

### the following is for timeit testing
def run():
    number = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    limit = 13
    thirteen = []
    digits = []
    largest = 0
    i = 0

    while i < len(number):
        num = number[i:i+limit]
        zero_pos = num.find('0')
        if zero_pos < 0:
            product = reduce(lambda x,y: int(x)*int(y), num)
            if product > largest:
                largest = product
                thirteen = [int(x) for x in num]
        elif zero_pos >= 0:
            i += zero_pos
        elif len(num) < 13:
            break

        i += 1    

class Help():
    def run(self):
        print "Enter an integer that corresponds to the Eulor Project Number"
        print "Solutions are available for the following projects:"
        for proj in projectList:
            print proj + "\n"
            
class Project1():
    def run(self):
        n = 0
        for i in xrange(1,1000):
            if not i % 5 or not i % 3:
                n = n + i
        print n
        
class Project2():
    def run(self):
        arr = []
        a,b = 0, 1
        while b <= 4000000:
            a,b = b, a+b
            if b%2 == 0:
                arr.append(b) 
        sum=0
        for x in arr:
            sum = x + sum
        print sum

class Project3():
    '''
        We want to know what the largest prime factor is of 
        600851475143
    '''
    def run(self):
        n = 600851475143
        i = 2
        while i * i <n:
            while n%i == 0:
                n = n/i
            i+=1
        print n
        
class Project4():
    """
    Find the largest palindrome made from the product of two 3-digit numbers:
       
    So we start with 999, the largest 3 digit number (a).
    We multiply that by all the other numbers less than it.  We compare that number to it's
    reversed string (s[::-1]), and if they are the same, we break out of the loop
    """
    def run(self):
        n = 0
        for a in xrange(999, 100, -1):
            for b in xrange(a, 100, -1):
                x = a * b
                if x > n:
                    s = str(x)
                    if s == s[::-1]:
                        n = a*b
                        break
        print n

class Project5():
    """
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    """
    def run(self):
        n = 20
        p = 0
        while(p == 0):
            for x in xrange(1, 21):
                if n%x != 0:
                    break
            if x == 20:
                p = n
            else:
                n +=1
        print n
        
class Project6():
    """
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    """
    def run(self):
        n = 10
        r = xrange(1, n+1)
        a = sum(r)
        print a * a - sum(i * i for i in r)
        
class Project7():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10 001st prime number?
    """
    def run(self):
        n = 0
        for x in xrange(2, sys.maxint):
            if self.is_prime(x):
                if n == 10000:
                    reqprime = x
                    break
                else:
                    n += 1
        print reqprime
    def is_prime(self, a):
        return all(a % i for i in xrange(2, a))
        
class Project8():
    """
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """
    def run(self):
        number = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
        limit = 13
        thirteen = []
        digits = []
        largest = 0
        i = 0

        while i < len(number):
            num = number[i:i+limit]
            zero_pos = num.find('0')
            if zero_pos < 0:
                product = reduce(lambda x,y: int(x)*int(y), num)
                if product > largest:
                    largest = product
                    thirteen = [int(x) for x in num]
            elif zero_pos >= 0:
                i += zero_pos
            elif len(num) < 13:
                break

            i += 1    
        print largest
    
    def run_slower_butEasyToRead(self):
        x = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
        n = 0
        for i in xrange(0, len(x)-12):
            m = 1
            if 0 not in xrange(i, i+13):
                for q in xrange(i, i+13):
                    m = m * int(x[q])
                if m > n: n = m
                
        print n
        
class Project9():
    """
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    """
    def run(self):
        for a in xrange(1, 1000):
            for b in xrange(1, 1000):
                c = 1000 - a - b
                if a*a + b*b == c*c:
                    print a*b*c
                    
class Project10():
    def sieveOfAtkin(self,limit):
        P = [2,3]
        sieve=[False]*(limit+1)
        sieve[2] = True
        sieve[3] = True
        for x in xrange(1,int(math.sqrt(limit))+1):
            for y in range(1,int(math.sqrt(limit))+1):
                n = 4*x**2 + y**2
                if n<=limit and (n%12==1 or n%12==5) : sieve[n] = not sieve[n]
                n = 3*x**2+y**2
                if n<= limit and n%12==7 : sieve[n] = not sieve[n]
                n = 3*x**2 - y**2
                if x>y and n<=limit and n%12==11 : sieve[n] = not sieve[n]
        for x in xrange(5,int(math.sqrt(limit))):
            if sieve[x]:
                for y in xrange(x**2,limit+1,x**2):
                    sieve[y] = False
        return sieve
        

    def run(self):
        """
        Find the sum of all the primes below two million.
        """
        """
        We'll use a Atkin Sieve, refer to:
        http://www.codeproject.com/Articles/429694/Finding-prime-numbers
        """
        limit = 2000000
        sieve = self.sieveOfAtkin(limit)
        print sum(x for x in xrange(2, len(sieve)) if sieve[x])
        
class Project13():
    def run(self):
        print str(sum((
        37107287533902102798797998220837590246510135740250,
        46376937677490009712648124896970078050417018260538,
        74324986199524741059474233309513058123726617309629,
        91942213363574161572522430563301811072406154908250,
        23067588207539346171171980310421047513778063246676,
        89261670696623633820136378418383684178734361726757,
        28112879812849979408065481931592621691275889832738,
        44274228917432520321923589422876796487670272189318,
        47451445736001306439091167216856844588711603153276,
        70386486105843025439939619828917593665686757934951,
        62176457141856560629502157223196586755079324193331,
        64906352462741904929101432445813822663347944758178,
        92575867718337217661963751590579239728245598838407,
        58203565325359399008402633568948830189458628227828,
        80181199384826282014278194139940567587151170094390,
        35398664372827112653829987240784473053190104293586,
        86515506006295864861532075273371959191420517255829,
        71693888707715466499115593487603532921714970056938,
        54370070576826684624621495650076471787294438377604,
        53282654108756828443191190634694037855217779295145,
        36123272525000296071075082563815656710885258350721,
        45876576172410976447339110607218265236877223636045,
        17423706905851860660448207621209813287860733969412,
        81142660418086830619328460811191061556940512689692,
        51934325451728388641918047049293215058642563049483,
        62467221648435076201727918039944693004732956340691,
        15732444386908125794514089057706229429197107928209,
        55037687525678773091862540744969844508330393682126,
        18336384825330154686196124348767681297534375946515,
        80386287592878490201521685554828717201219257766954,
        78182833757993103614740356856449095527097864797581,
        16726320100436897842553539920931837441497806860984,
        48403098129077791799088218795327364475675590848030,
        87086987551392711854517078544161852424320693150332,
        59959406895756536782107074926966537676326235447210,
        69793950679652694742597709739166693763042633987085,
        41052684708299085211399427365734116182760315001271,
        65378607361501080857009149939512557028198746004375,
        35829035317434717326932123578154982629742552737307,
        94953759765105305946966067683156574377167401875275,
        88902802571733229619176668713819931811048770190271,
        25267680276078003013678680992525463401061632866526,
        36270218540497705585629946580636237993140746255962,
        24074486908231174977792365466257246923322810917141,
        91430288197103288597806669760892938638285025333403,
        34413065578016127815921815005561868836468420090470,
        23053081172816430487623791969842487255036638784583,
        11487696932154902810424020138335124462181441773470,
        63783299490636259666498587618221225225512486764533,
        67720186971698544312419572409913959008952310058822,
        95548255300263520781532296796249481641953868218774,
        76085327132285723110424803456124867697064507995236,
        37774242535411291684276865538926205024910326572967,
        23701913275725675285653248258265463092207058596522,
        29798860272258331913126375147341994889534765745501,
        18495701454879288984856827726077713721403798879715,
        38298203783031473527721580348144513491373226651381,
        34829543829199918180278916522431027392251122869539,
        40957953066405232632538044100059654939159879593635,
        29746152185502371307642255121183693803580388584903,
        41698116222072977186158236678424689157993532961922,
        62467957194401269043877107275048102390895523597457,
        23189706772547915061505504953922979530901129967519,
        86188088225875314529584099251203829009407770775672,
        11306739708304724483816533873502340845647058077308,
        82959174767140363198008187129011875491310547126581,
        97623331044818386269515456334926366572897563400500,
        42846280183517070527831839425882145521227251250327,
        55121603546981200581762165212827652751691296897789,
        32238195734329339946437501907836945765883352399886,
        75506164965184775180738168837861091527357929701337,
        62177842752192623401942399639168044983993173312731,
        32924185707147349566916674687634660915035914677504,
        99518671430235219628894890102423325116913619626622,
        73267460800591547471830798392868535206946944540724,
        76841822524674417161514036427982273348055556214818,
        97142617910342598647204516893989422179826088076852,
        87783646182799346313767754307809363333018982642090,
        10848802521674670883215120185883543223812876952786,
        71329612474782464538636993009049310363619763878039,
        62184073572399794223406235393808339651327408011116,
        66627891981488087797941876876144230030984490851411,
        60661826293682836764744779239180335110989069790714,
        85786944089552990653640447425576083659976645795096,
        66024396409905389607120198219976047599490197230297,
        64913982680032973156037120041377903785566085089252,
        16730939319872750275468906903707539413042652315011,
        94809377245048795150954100921645863754710598436791,
        78639167021187492431995700641917969777599028300699,
        15368713711936614952811305876380278410754449733078,
        40789923115535562561142322423255033685442488917353,
        44889911501440648020369068063960672322193204149535,
        41503128880339536053299340368006977710650566631954,
        81234880673210146739058568557934581403627822703280,
        82616570773948327592232845941706525094512325230608,
        22918802058777319719839450180888072429661980811197,
        77158542502016545090413245809786882778948721859617,
        72107838435069186155435662884062257473692284509516,
        20849603980134001723930671666823555245252804609722,
        53503534226472524250874054075591789781264330331690,
        )))[0:10]

if __name__ == '__main__':
    projectList = {
    "Project1" : Project1,
    "Project2" : Project2,
    "Project3" : Project3,
    "Project4" : Project4,
    "Project5" : Project5,
    "Project6" : Project6,
    "Project7" : Project7,
    "Project8" : Project8,
    "Project9" : Project9,
    "Project10": Project10,
    "Project13": Project13,
    }
    while True:
        projNum = raw_input("Please enter the Euler Project Number: ")
        try: 
            projNum = int(projNum)
            if projNum != 0:
                projNum = "Project" + str(projNum)
                try:
                    proj = projectList[projNum]()
                    proj.run()
                except Exception as e:
                    print "I don't have a solution for that one yet"
                    print e
            else:
                break

        except: 
            if projNum == "-h":
                h = Help()
                h.run()
            else:
                print "Please enter an Integer or -h for help"
